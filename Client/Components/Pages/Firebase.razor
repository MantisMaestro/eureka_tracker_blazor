@page "/Firebase"

@using Client.FirebaseMigration.Models
@using Client.Services
@using EurekaDb.Context
@using EurekaDb.Migrations
@rendermode InteractiveServer

@inject FirebaseService FirebaseService
@inject EurekaContext EurekaContext

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnButtonClick">Load from Firestore</MudButton>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveToDatabase">Save to Database</MudButton>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudDataGrid Items="@_playerSessions">
                <Columns>
                    <PropertyColumn Property="x => x.Name" />
                    <PropertyColumn Property="x => x.Uuid" />
                    <PropertyColumn Property="x => x.LastOnline" />
                    <PropertyColumn Property="x => x.TimeOnlineSeconds" />
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
    
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudDataGrid Items="@_players">
                <Columns>
                    <PropertyColumn Property="x => x.Name" />
                    <PropertyColumn Property="x => x.Id" />
                    <PropertyColumn Property="x => x.LastOnline" />
                    <PropertyColumn Property="x => x.TotalPlayTime"  />
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    private int _dayCount = 0;

    private FirebaseModel? _firebaseModel;
    private List<FirebasePlayerSession> _playerSessions = [];
    private List<PlayerSession> _playerSessionsMapped = [];
    private List<Player> _players = [];
    
    private async Task OnButtonClick()
    {
        Console.WriteLine("Button clicked!");
        _firebaseModel = await FirebaseService.BuildFirebaseModel();
        
        if (_firebaseModel is null) return;
        
        _dayCount = _firebaseModel.DayRecords.Count;
        _playerSessions = _firebaseModel.DayRecords.SelectMany(x => x.PlayerSessions).ToList();
        
        var players = _playerSessions.Select(x => new Player(){Id = x.Uuid, Name = x.Name}).ToList();
    
        foreach (var player in players)
        {
            player.LastOnline = _playerSessions.Where(x => x.Uuid == player.Id).Max(x => x.LastOnline).ToShortDateString();
            player.TotalPlayTime = _playerSessions.Where(x => x.Uuid == player.Id).Sum(x => x.TimeOnlineSeconds);
        }
    
        _players = players.DistinctBy(x => x.Id).ToList();
        _playerSessionsMapped = _playerSessions.Select(x => new PlayerSession()
        {
            PlayerId = x.Uuid,
            Date = DateOnly.FromDateTime(x.CreatedAt),
            TimePlayedInSession = x.TimeOnlineSeconds
        }).ToList();
    }
    
    private async Task SaveToDatabase()
    {
        if (_firebaseModel is null) return;
    
        try
        {
            await EurekaContext.Players.AddRangeAsync(_players);
            await EurekaContext.PlayerSessions.AddRangeAsync(_playerSessionsMapped);
            await EurekaContext.SaveChangesAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}